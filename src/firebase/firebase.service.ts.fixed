import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import * as admin from 'firebase-admin';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class FirebaseService implements OnModuleInit {
  private readonly logger = new Logger(FirebaseService.name);
  
  private db: admin.firestore.Firestore;
  
  constructor(private configService: ConfigService) {}

  async onModuleInit() {
    try {
      // Firebase Admin 초기화
      if (!admin.apps.length) {
        // 서비스 계정 키가 있는 경우 - 프로덕션 환경
        const serviceAccount = this.configService.get<string>('FIREBASE_SERVICE_ACCOUNT');
        const databaseURL = this.configService.get<string>('FIREBASE_DATABASE_URL');
        
        this.logger.log(`서비스 계정 설정: ${serviceAccount ? '있음' : '없음'}, DB URL: ${databaseURL ? '있음' : '없음'}`);
        
        if (serviceAccount) {
          try {
            // JSON 문자열에서 객체로 변환
            const serviceAccountObj = JSON.parse(serviceAccount);
            
            // 필수 필드 검증
            if (!serviceAccountObj.project_id || !serviceAccountObj.private_key || !serviceAccountObj.client_email) {
              this.logger.error('서비스 계정 키에 필요한 필드가 누락되었습니다');
              throw new Error('Invalid service account format');
            }
            
            this.logger.log(`Firebase 프로젝트: ${serviceAccountObj.project_id} 초기화 시작`);
            
            const appConfig: admin.AppOptions = {
              credential: admin.credential.cert(serviceAccountObj)
            };
            
            if (databaseURL) {
              appConfig.databaseURL = databaseURL;
            }
            
            admin.initializeApp(appConfig);
            this.logger.log(`Firebase Admin이 프로젝트 ${serviceAccountObj.project_id}로 초기화되었습니다`);
          } catch (parseError) {
            this.logger.error('서비스 계정 키 파싱 중 오류:', parseError);
            throw parseError;
          }
        } else {
          // 서비스 계정 키가 없는 경우
          this.logger.warn('Firebase 서비스 계정 키가 제공되지 않았습니다. Firestore 기능이 제한될 수 있습니다.');
          admin.initializeApp();
        }
        
        this.db = admin.firestore();
        this.logger.log('Firestore 인스턴스가 생성되었습니다.');
      } else {
        this.db = admin.firestore();
        this.logger.log('기존 Firebase Admin 인스턴스를 사용합니다.');
      }
      
      // Firestore 연결 테스트
      await this.testFirestoreConnection();
    } catch (error) {
      this.logger.error('Firebase Admin 초기화 중 오류 발생:', error);
      throw error;
    }
  }
  
  // Firestore 연결 테스트
  private async testFirestoreConnection() {
    try {
      const testDoc = this.db.collection('_connection_test').doc('test');
      await testDoc.set({ timestamp: admin.firestore.FieldValue.serverTimestamp() });
      await testDoc.delete();
      this.logger.log('Firestore 연결 테스트 성공');
    } catch (error) {
      this.logger.error('Firestore 연결 테스트 실패:', error);
      throw error;
    }
  }

  /**
   * Firebase Firestore 인스턴스 반환
   */
  getFirestore(): admin.firestore.Firestore {
    return this.db;
  }

  /**
   * 채팅방에 메시지 저장
   */
  async saveMessage(roomId: string, messageData: any): Promise<any> {
    try {
      const messagesRef = this.db.collection(`rooms/${roomId}/messages`);
      const messageWithTimestamp = {
        ...messageData,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
      };
      
      // 메시지 저장
      const docRef = await messagesRef.add(messageWithTimestamp);
      const doc = await docRef.get();
      
      return {
        id: docRef.id,
        ...messageWithTimestamp,
      };
    } catch (error) {
      this.logger.error(`메시지 저장 중 오류 발생 (roomId: ${roomId}):`, error);
      throw error;
    }
  }

  /**
   * 채팅방 메시지 목록 조회
   */
  async getMessages(roomId: string, limit: number = 30): Promise<any[]> {
    try {
      const messagesRef = this.db.collection(`rooms/${roomId}/messages`);
      const snapshot = await messagesRef.orderBy('timestamp', 'desc')
        .limit(limit)
        .get();
      
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));
    } catch (error) {
      this.logger.error(`메시지 조회 중 오류 발생 (roomId: ${roomId}):`, error);
      return [];
    }
  }

  /**
   * 채팅방 참여
   */
  async joinRoom(roomId: string, userData: any): Promise<boolean> {
    try {
      // 채팅방이 존재하는지 확인하고 없으면 생성
      await this.ensureRoomExists(roomId);
      
      // 참여자 정보 업데이트
      const participantRef = this.db.doc(`rooms/${roomId}/participants/${userData.id}`);
      
      await participantRef.set({
        id: userData.id,
        name: userData.name || '익명',
        avatar: userData.avatar || '',
        lastActive: admin.firestore.FieldValue.serverTimestamp(),
        isActive: true
      }, { merge: true });
      
      return true;
    } catch (error) {
      this.logger.error(`채팅방 참여 중 오류 발생 (roomId: ${roomId}, userId: ${userData?.id}):`, error);
      return false;
    }
  }

  /**
   * 채팅방 나가기
   */
  async leaveRoom(roomId: string, userId: string): Promise<boolean> {
    try {
      const participantRef = this.db.doc(`rooms/${roomId}/participants/${userId}`);
      
      // 참여자 상태 업데이트 (비활성화)
      await participantRef.update({ 
        isActive: false,
        leftAt: admin.firestore.FieldValue.serverTimestamp(),
      });
      
      return true;
    } catch (error) {
      this.logger.error(`채팅방 나가기 중 오류 발생 (roomId: ${roomId}, userId: ${userId}):`, error);
      return false;
    }
  }

  /**
   * 채팅방 생성 또는 존재 확인
   */
  async ensureRoomExists(roomId: string, roomData: any = {}): Promise<any> {
    try {
      const roomRef = this.db.doc(`rooms/${roomId}`);
      const roomDoc = await roomRef.get();
      
      if (!roomDoc.exists) {
        // 방이 없으면 생성
        const defaultRoomData = {
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
          updatedAt: admin.firestore.FieldValue.serverTimestamp(),
          ...roomData,
        };
        
        await roomRef.set(defaultRoomData);
        return { id: roomId, ...defaultRoomData, new: true };
      }
      
      return { id: roomId, ...roomDoc.data(), new: false };
    } catch (error) {
      this.logger.error(`채팅방 생성/확인 중 오류 발생 (roomId: ${roomId}):`, error);
      throw error;
    }
  }

  /**
   * 채팅방 참여자 목록 조회
   */
  async getRoomParticipants(roomId: string): Promise<any[]> {
    try {
      const participantsRef = this.db.collection(`rooms/${roomId}/participants`);
      const snapshot = await participantsRef.get();
      
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
      }));
    } catch (error) {
      this.logger.error(`참여자 목록 조회 중 오류 발생 (roomId: ${roomId}):`, error);
      return [];
    }
  }
}
